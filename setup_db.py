import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, User, Handlowiec, Kategorie_Wyceny, Pozycje_Wyceny
from werkzeug.security import generate_password_hash

# --- ≈öcie≈ºki folder√≥w, kt√≥re majƒÖ istnieƒá ---
STATIC_FOLDERS = [
    os.path.join("static", "zdjecia"),
    os.path.join("static", "pdf")
]

# --- Utw√≥rz bazƒô danych ---
engine = create_engine("sqlite:///baza.db")
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# --- Dodaj domy≈õlnego admina ---
def create_admin():
    if not session.query(User).filter_by(user_name="admin").first():
        users = [
            User(imie="Admin", nazwisko="Systemowy", user_name = "admin", rola="admin", haslo="admin"),
            User(imie="Handlowiec", nazwisko="Jeden", user_name = "han1", rola="pracownik biuro", haslo="qwerty"),            
            ]
        session.add_all(users)
        print("Dodano u≈ºytkownika admin")
    else:
        print("U≈ºytkownik admin ju≈º istnieje.")

def create_handlowiec():
    if not session.query(Handlowiec).filter_by(user_name="admin").first():
        handl = [
            Handlowiec(user_id=2, nr_kontaktowy="666555666", email="han1_@poczta.com.pl"),
                      
            ]
        session.add_all(handl)
        print("Dodano handlowca")
    else:
        print("U≈ºytkownik admin ju≈º istnieje.")




def create_kategorie():
    if not session.query(Kategorie_Wyceny).first():
        kat = [
            Kategorie_Wyceny("Typ schod√≥w", "Schody policzkowe a≈ºurowe", "Nowoczesne, lekkie wizualnie schody a≈ºurowe wykonane z wysokiej jako≈õci drewna dƒôbowego. Konstrukcja grzebieniowa zapewnia trwa≈Ço≈õƒá i stabilno≈õƒá, a brak podstopnic dodaje wnƒôtrzu przestronno≈õci. Idealne do nowoczesnych i klasycznych aran≈ºacji."),
            Kategorie_Wyceny("Typ schod√≥w", "Schody policzkowe pe≈Çne", "Nowoczesne, lekkie wizualnie schody pe≈Çne wykonane z wysokiej jako≈õci drewna dƒôbowego. Konstrukcja grzebieniowa zapewnia trwa≈Ço≈õƒá i stabilno≈õƒá. Idealne do nowoczesnych i klasycznych aran≈ºacji."),
            Kategorie_Wyceny("Typ schod√≥w", "Schody na beton (schody z nawisem)", "Charakterystyczny nawis stopnia zapewnia nowoczesny wyglƒÖd i lekko≈õƒá wizualnƒÖ. Precyzyjne spasowanie podstopnic i listew przy≈õciennych gwarantuje estetyczne wyko≈Ñczenie ka≈ºdego detalu."),
            Kategorie_Wyceny("Balustrady", "Balustrada Laserowa nr 37", "Dekoracyjna balustrada stalowa wycinana laserowo, osadzona w ramie z naturalnego drewna. Geometryczny, nieregularny wz√≥r nadaje wnƒôtrzu charakteru i podkre≈õla nowoczesny styl aran≈ºacji."),
            Kategorie_Wyceny("Po≈ÇƒÖczenie z posadzkƒÖ", "Nad posadzkƒÖ"),
            Kategorie_Wyceny("Po≈ÇƒÖczenie z posadzkƒÖ", "R√≥wno z posadzkƒÖ"),
               ]
       
        session.add_all(kat)
        print("Dodano przyk≈Çadowe kategorie.")

def create_pozycje():
    if not session.query(Pozycje_Wyceny).first():
        poz = [
            Pozycje_Wyceny(kategoria_id=1, pozycja="Stopie≈Ñ A≈ºur", cena_jednostkowa=1000.00, jednostka_miary="szt"),           
            Pozycje_Wyceny(kategoria_id=1, pozycja="Podest", cena_jednostkowa=900.00, jednostka_miary="m2"),
            Pozycje_Wyceny(kategoria_id=1, pozycja="Monta≈º schod√≥w policzkowych", cena_jednostkowa=3000.00, jednostka_miary="kpl"),

            Pozycje_Wyceny(kategoria_id=2, pozycja="Stopie≈Ñ Pe≈Çne", cena_jednostkowa=1800.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=2, pozycja="Podest", cena_jednostkowa=900.00, jednostka_miary="m2"),
            Pozycje_Wyceny(kategoria_id=2, pozycja="Monta≈º schod√≥w policzkowych", cena_jednostkowa=3000.00, jednostka_miary="kpl"),

            Pozycje_Wyceny(kategoria_id=3, pozycja="Materia≈Ç DƒÖb", cena_jednostkowa=1500.00, jednostka_miary="kpl"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="proste do 1m", cena_jednostkowa=1400.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="proste do 1,2m", cena_jednostkowa=1600.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="proste do 1,4m", cena_jednostkowa=1800.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="proste powy≈ºej 1,4m", cena_jednostkowa=2000.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="zabiegowe du≈ºe (2 zabiegi w kwadracie)", cena_jednostkowa=850.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="zabiegowe du≈ºe (3 zabiegi w kwadracie)", cena_jednostkowa=1000.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="Stopie≈Ñ okrƒÖg≈Çy", cena_jednostkowa=500.00, jednostka_miary="szt"),
            Pozycje_Wyceny(kategoria_id=3, pozycja="Podest", cena_jednostkowa=1500, jednostka_miary="m2"),

            Pozycje_Wyceny(kategoria_id=4, pozycja="Balustrada na antresoli ( prosta)", cena_jednostkowa=750.00, jednostka_miary="mb"),

            Pozycje_Wyceny(kategoria_id=5, pozycja="po≈ÇƒÖczenie", cena_jednostkowa=1000.00, jednostka_miary="mb"),
            Pozycje_Wyceny(kategoria_id=6, pozycja="po≈ÇƒÖczenie", cena_jednostkowa=1200.00, jednostka_miary="mb"),
               
               ]
        session.add_all(poz)
        print("‚ûï Dodano przyk≈ÇadowƒÖ pozycjƒô.")
    else:
        print("‚úî Pozycje ju≈º istniejƒÖ.")

# --- Utw√≥rz foldery static ---
def create_static_folders():
    for folder in STATIC_FOLDERS:
        os.makedirs(folder, exist_ok=True)
        print(f"üìÅ Upewniono siƒô, ≈ºe istnieje: {folder}")

# --- Uruchomienie ca≈Çego setupu ---
def main():
    create_static_folders()
    create_admin()
    create_handlowiec()
    create_kategorie()
    create_pozycje()
    session.commit()
    session.close()
    print("‚úÖ Baza danych gotowa do pracy.")

if __name__ == "__main__":
    main()